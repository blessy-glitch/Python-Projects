{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "40889eae-07fa-494b-92c6-4d02ca0cbd24",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter your name:  Blessy\n",
      "Enter your starting money:  100\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to BlackJack!\n",
      "\n",
      "Blessy: 100 credits\n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter your bet amount:  20\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your hand: Ace of Spades, 2 of Spades\n",
      "Dealer's showing: 3 of Hearts\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Do you want to hit or stand? (h/s):  h\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your hand: Ace of Spades, 2 of Spades, Ace of Diamonds\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Do you want to hit or stand? (h/s):  s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dealer's hand: 3 of Hearts, 10 of Hearts\n",
      "Dealer's hand: 3 of Hearts, 10 of Hearts, Ace of Hearts\n",
      "Dealer's hand: 3 of Hearts, 10 of Hearts, Ace of Hearts, King of Clubs\n",
      "You win!\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Do you want to play another round? (y/n):  y\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Blessy: 120 credits\n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter your bet amount:  30\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your hand: King of Hearts, 5 of Spades\n",
      "Dealer's showing: 5 of Hearts\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Do you want to hit or stand? (h/s):  s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dealer's hand: 5 of Hearts, 9 of Diamonds\n",
      "Dealer's hand: 5 of Hearts, 9 of Diamonds, 3 of Spades\n",
      "Dealer wins!\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Do you want to play another round? (y/n):  n\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Thanks for playing! Final balance: 90\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "\n",
    "# Card class to represent each card\n",
    "class Card:\n",
    "    def __init__(self, suit, rank):\n",
    "        self.suit = suit\n",
    "        self.rank = rank\n",
    "        self.value = self.get_value()\n",
    "\n",
    "    def get_value(self):\n",
    "        if self.rank in ['Jack', 'Queen', 'King']:\n",
    "            return 10\n",
    "        elif self.rank == 'Ace':\n",
    "            return 11  # Can be 1 or 11; we'll handle Ace logic elsewhere\n",
    "        else:\n",
    "            return int(self.rank)\n",
    "\n",
    "    def __str__(self):\n",
    "        return f\"{self.rank} of {self.suit}\"\n",
    "\n",
    "# Deck class to manage the deck of cards\n",
    "class Deck:\n",
    "    suits = ['Hearts', 'Diamonds', 'Clubs', 'Spades']\n",
    "    ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King', 'Ace']\n",
    "\n",
    "    def __init__(self):\n",
    "        self.cards = [Card(suit, rank) for suit in self.suits for rank in self.ranks]\n",
    "        self.shuffle()\n",
    "\n",
    "    def shuffle(self):\n",
    "        random.shuffle(self.cards)\n",
    "\n",
    "    def deal(self):\n",
    "        return self.cards.pop()\n",
    "\n",
    "# Hand class to represent a player's or dealer's hand\n",
    "class Hand:\n",
    "    def __init__(self):\n",
    "        self.cards = []\n",
    "        self.value = 0\n",
    "        self.aces = 0  # Track Aces separately to adjust their value\n",
    "\n",
    "    def add_card(self, card):\n",
    "        self.cards.append(card)\n",
    "        self.value += card.value\n",
    "        if card.rank == 'Ace':\n",
    "            self.aces += 1\n",
    "        self.adjust_for_aces()\n",
    "\n",
    "    def adjust_for_aces(self):\n",
    "        while self.value > 21 and self.aces:\n",
    "            self.value -= 10\n",
    "            self.aces -= 1\n",
    "\n",
    "    def __str__(self):\n",
    "        return ', '.join(str(card) for card in self.cards)\n",
    "\n",
    "# Player class to manage player details\n",
    "class Player:\n",
    "    def __init__(self, name, money):\n",
    "        self.name = name\n",
    "        self.money = money\n",
    "        self.hand = Hand()\n",
    "\n",
    "    def place_bet(self, amount):\n",
    "        if amount > self.money:\n",
    "            raise ValueError(\"Insufficient funds!\")\n",
    "        self.money -= amount\n",
    "        return amount\n",
    "\n",
    "    def win_bet(self, amount):\n",
    "        self.money += amount\n",
    "\n",
    "    def __str__(self):\n",
    "        return f\"{self.name}: {self.money} credits\"\n",
    "\n",
    "# BlackJackGame class to manage the game logic\n",
    "class BlackJackGame:\n",
    "    def __init__(self, player_name, starting_money):\n",
    "        self.player = Player(player_name, starting_money)\n",
    "        self.deck = Deck()\n",
    "        self.dealer_hand = Hand()\n",
    "\n",
    "    def play_round(self):\n",
    "        print(f\"\\n{self.player}\\n\")\n",
    "\n",
    "        # Player places a bet\n",
    "        while True:\n",
    "            try:\n",
    "                bet = int(input(\"Enter your bet amount: \"))\n",
    "                self.current_bet = self.player.place_bet(bet)\n",
    "                break\n",
    "            except ValueError as e:\n",
    "                print(e)\n",
    "\n",
    "        # Initial deal\n",
    "        self.player.hand = Hand()\n",
    "        self.dealer_hand = Hand()\n",
    "\n",
    "        for _ in range(2):\n",
    "            self.player.hand.add_card(self.deck.deal())\n",
    "            self.dealer_hand.add_card(self.deck.deal())\n",
    "\n",
    "        # Show cards\n",
    "        print(\"Your hand:\", self.player.hand)\n",
    "        print(\"Dealer's showing:\", self.dealer_hand.cards[0])\n",
    "\n",
    "        # Player's turn\n",
    "        while self.player.hand.value < 21:\n",
    "            choice = input(\"Do you want to hit or stand? (h/s): \").lower()\n",
    "            if choice == 'h':\n",
    "                self.player.hand.add_card(self.deck.deal())\n",
    "                print(\"Your hand:\", self.player.hand)\n",
    "            elif choice == 's':\n",
    "                break\n",
    "            else:\n",
    "                print(\"Invalid choice. Please enter 'h' or 's'.\")\n",
    "\n",
    "        if self.player.hand.value > 21:\n",
    "            print(\"You bust! Dealer wins.\")\n",
    "            return\n",
    "\n",
    "        # Dealer's turn\n",
    "        print(\"Dealer's hand:\", self.dealer_hand)\n",
    "        while self.dealer_hand.value < 17:\n",
    "            self.dealer_hand.add_card(self.deck.deal())\n",
    "            print(\"Dealer's hand:\", self.dealer_hand)\n",
    "\n",
    "        # Determine winner\n",
    "        if self.dealer_hand.value > 21 or self.player.hand.value > self.dealer_hand.value:\n",
    "            print(\"You win!\")\n",
    "            self.player.win_bet(self.current_bet * 2)\n",
    "        elif self.player.hand.value < self.dealer_hand.value:\n",
    "            print(\"Dealer wins!\")\n",
    "        else:\n",
    "            print(\"It's a tie!\")\n",
    "            self.player.win_bet(self.current_bet)  # Return bet\n",
    "\n",
    "    def play_game(self):\n",
    "        print(\"Welcome to BlackJack!\")\n",
    "        while self.player.money > 0:\n",
    "            self.play_round()\n",
    "            if input(\"Do you want to play another round? (y/n): \").lower() != 'y':\n",
    "                break\n",
    "        print(\"Thanks for playing! Final balance:\", self.player.money)\n",
    "\n",
    "# To start the game\n",
    "if __name__ == \"__main__\":\n",
    "    name = input(\"Enter your name: \")\n",
    "    starting_money = int(input(\"Enter your starting money: \"))\n",
    "    game = BlackJackGame(name, starting_money)\n",
    "    game.play_game()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
